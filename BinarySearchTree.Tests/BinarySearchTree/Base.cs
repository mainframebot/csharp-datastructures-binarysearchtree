using System;
using System.Linq;

namespace BinarySearchTree.Tests.BinarySearchTree
{
    public abstract class Base
    {
        public BinarySearchTree<int> BinarySearchTree { get { return GenerateTree(Items); } }

        public BinarySearchTree<int> BinarySearchTreeDeleteCase1 { get { return GenerateTree(DeleteCase1Items); } }

        public BinarySearchTree<int> BinarySearchTreeDeleteCase2 { get { return GenerateTree(DeleteCase2Items); } }

        public BinarySearchTree<int> BinarySearchTreeDeleteCase3 { get { return GenerateTree(DeleteCase3Items); } }

        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+
        // Binary Search Tree:
        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+
        // Key references when working with trees:
        //+-------------------------------------------------------------------------------------------------------------------------+
        // c        = current (current)
        // p        = parent (current.parent)
        // gp       = grandparent (current.parent.parent)
        // s        = sibling (current.parent.left/right)
        // lc       = left child (current.left)
        // rc       = right child (current.right)
        // u        = uncle (current.parent.parent.left/right) 
        // b        = black (redblack tree only)
        // r        = red (redblack tree only)
        // nil      = null / sentinel
        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+
        // Items, forming a Binary Search Tree: 
        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Binary Search Tree                    ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||                                       ||                                       |
        //|           /               \           ||                                       ||                                       |
        //|          20                80         ||                                       ||                                       |
        //|        /   \             /   \        ||                                       ||                                       |
        //|       /     \           /     \       ||                                       ||                                       |
        //|      10      40        70      90     ||                                       ||                                       |
        //|     / \     / \       / \     / \     ||                                       ||                                       |
        //|    /   \   /   \     /   \   /   \    ||                                       ||                                       |
        //|    5   15 35   45   65   75 85   95   ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int[] Items = {50, 20, 80, 10, 40, 70, 90, 5, 15, 35, 45, 65, 75, 85, 95};

        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+
        // Items, Traversal:
        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        // PreOrder Traversal: 
        // 1. Process node 
        // 2. Go left
        // 3. Go right
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int[] ItemsPreOrder = {50, 20, 10, 5, 15, 40, 35, 45, 80, 70, 65, 75, 90, 85, 95};

        //+-------------------------------------------------------------------------------------------------------------------------+
        // InOrder Traversal: 
        // 1. Go left 
        // 2. Process node
        // 3. Go right
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int[] ItemsInOrder = {5, 10, 15, 20, 35, 40, 45, 50, 65, 70, 75, 80, 85, 90, 95};

        //+-------------------------------------------------------------------------------------------------------------------------+
        // PostOrder Traversal: 
        // 1. Go left 
        // 2. Go right
        // 3. Process node
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int[] ItemsPostOrder = {5, 15, 10, 35, 45, 40, 20, 65, 75, 70, 85, 95, 90, 80, 50};

        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+
        // Items, Insert:
        // 1. If new node's value < parent node's value go left
        // 2. If new node's value = parent node's value go right
        // 3. If new node's value > parent node's value go right
        // Continue until nil is found then insert new node
        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Insert less than parent               || Insert equal to parent                || Insert greater than parent            |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||            /+---+ 50+---+\            ||            /+---+ 50+---+\            |
        //|           /               \           ||           /               \           ||           /               \           |
        //|          20                80         ||          20                80         ||          20                80         |
        //|        /   \             /   \        ||        /   \             /   \        ||        /   \             /   \        |
        //|       /     \           /     \       ||       /     \           /     \       ||       /     \           /     \       |
        //|      10      40        70      90     ||      10      40        70      90     ||      10      40        70      90     |
        //|     / \     / \       / \     / \     ||     / \     / \       / \     / \     ||     / \     / \       / \     / \     |
        //|    /   \   /   \     /   \   /   \    ||    /   \   /   \     /   \   /   \    ||    /   \   /   \     /   \   /   \    |
        //|    5   15 35   45   65   75 85   95   ||    5   15 35   45   65   75 85   95   ||    5   15 35   45   65   75 85   95   |
        //|                                 /     ||                                   \   ||                                   \   |
        //|                                /      ||                                    \  ||                                    \  |
        //|                               94      ||                                    95 ||                                    96 |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int ItemsInsertLessThanParent = 94;

        public int ItemsInsertEqualToParent = 95;

        public int ItemsInsertGreaterThanParent = 96;

        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+
        // Delete:   
        // 1. If node to delete left = null (case 1)
        // 2. Else if node to delete right = null (case 2)
        // 3. Else access the left mode node (case 3)
        //
        // All deletion operation use the sub-routine Transplant(BinarySearchTree<T> tree, Node<T> deletedNode, Node<T> replacementNode)
        // 1. If deletedNode.parent = null, set root = replacementNode
        // 2. Else if deletedNode = deletedNode.parent.left, set deletedNode.parent.left = replacementNode
        // 3. Else if deletedNode = deletedNode.parent.right, set deletedNode.parent.right = replacementNode
        // 4. If replacementNode != null, set replacementNode.parent = deletedNode.parent
        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Case 1, node.left == null (else if)   || Case 2, node.right == null (else)     || Case 3, access leftmost node          |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||            /+---+ 50+---+\            ||            /+---+ 50+---+\            |
        //|           /               \           ||           /               \           ||           /               \           |
        //|          20                80         ||          20                80         ||          20                80         |
        //|        /   \                 \        ||        /   \             /            ||        /   \             /   \        |
        //|       /     \                 \       ||       /     \           /             ||       /     \           /     \       |
        //|      10      40                90     ||      10      40        70             ||      10      40        70      90     |
        //|     / \     / \               / \     ||     / \     / \       / \             ||     / \     / \       / \     / \     |
        //|    /   \   /   \             /   \    ||    /   \   /   \     /   \            ||    /   \   /   \     /   \   /   \    |
        //|    5   15 35   45           85   95   ||    5   15 35   45   65   75           ||    5   15 35   45   65   75 85   95   |
        //|                                       ||                                       ||                               \       |
        //|                                       ||                                       ||                                \      |
        //|                                       ||                                       ||                                nil    |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| node = 80, replacement = 90           || node = 80, replacement = 70           || node = 80, replacement = 85           |
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Case 1, node.left == null (else if case 2)  
        // 1. Transplant(tree, node, node.right)
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Case 1, node.left == null             || Case 1, result                        ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||            /+---+ 50+---+\            ||                                       |
        //|           /               \           ||           /               \           ||                                       |
        //|          20                80         ||          20                90         ||                                       |
        //|        /   \                 \        ||        /   \              / \         ||                                       |
        //|       /     \                 \       ||       /     \            /   \        ||                                       |
        //|      10      40                90     ||      10      40         85    95      ||                                       |
        //|     / \     / \               / \     ||     / \     / \                       ||                                       |
        //|    /   \   /   \             /   \    ||    /   \   /   \                      ||                                       |
        //|    5   15 35   45           85   95   ||    5   15 35   45                     ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| node = 80, replacement = 90           ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int[] DeleteCase1Items = {50, 20, 80, 10, 40, 90, 5, 15, 35, 45, 85, 95};
        public int DeleteCase1Item = 80;

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Case 2, node.right == null (else case 3)  
        // 1. Transplant(tree, node, node.left)
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Case 2, node.right == null            || Case 2, result                        ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||            /+---+ 50+---+\            ||                                       |
        //|           /               \           ||           /               \           ||                                       |
        //|          20                80         ||          20                70         ||                                       |
        //|        /   \             /            ||        /   \              / \         ||                                       |
        //|       /     \           /             ||       /     \            /   \        ||                                       |
        //|      10      40        70             ||      10      40         65    75      ||                                       |
        //|     / \     / \       / \             ||     / \     / \                       ||                                       |
        //|    /   \   /   \     /   \            ||    /   \   /   \                      ||                                       |
        //|    5   15 35   45   65   75           ||    5   15 35   45                     ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| node = 80, replacement = 70           ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int[] DeleteCase2Items = {50, 20, 80, 10, 40, 70, 5, 15, 35, 45, 65, 75};
        public int DeleteCase2Item = 80;

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Case 3, access leftmost node
        // 1. Use Minimum(node.right) to locate leftmost node
        // 2. If leftmostnode.parent != node to delete
        // 2. 1. Transplant(leftmostnode, leftmostnode.right)
        // 2. 2. Leftmostnode.right = node.right
        // 2. 3. Leftmostnode.right.parent = leftmostnode
        // 3. 1. Transplant(node, leftmostnode)
        // 3. 2. Leftmostnode.left = node.left
        // 3. 3. Leftmostnode.left.parent = leftmostnode
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Case 3                                || Case 3, leftmost.parent != node       || Case 3                                |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||                   50+---+\            ||            /+---+ 50+---+\            |
        //|           /               \           ||                           \           ||           /               \           |
        //|          20                80         ||          85                80         ||          20                85         |
        //|        /   \             /   \        ||            \             /   \        ||        /   \             /   \        |
        //|       /     \           /     \       ||             \           /     \       ||       /     \           /     \       |
        //|      10      40        70      90     ||              90        70      90     ||      10      40        70      90     |
        //|     / \     / \       / \     / \     ||             / \       / \     / \     ||     / \     / \       / \     / \     |
        //|    /   \   /   \     /   \   /   \    ||            /   \     /   \   /   \    ||    /   \   /   \     /   \   /   \    |
        //|    5   15 35   45   65   75 85   95   ||           nil  95   65   75 nil  95   ||    5   15 35   45   65   75 nil  95   |
        //|                               \       ||                                       ||                                       |
        //|                                \      ||                                       ||                                       |
        //|                                nil    ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| node = 80, leftmost = 85              || transplant leftmost.right, fix ref    || transplant node with leftmost, fix ref|
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int[] DeleteCase3Items = { 50, 20, 80, 10, 40, 70, 90, 5, 15, 35, 45, 65, 75, 85, 95 };
        public int DeleteCase3Item = 80;

        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+
        // Items, Contains and Search:
        // Using binary tree structure navigate by follow the tree's rules (mentioned above) to locate value
        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int ItemsSearchSucceeds = 90;

        public int ItemsSearchFails = 100;

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Items, Minimum and Maximum:
        // 1. Minimum, while left is not null keep going left
        // 2. Maximum, while right is not null keep going right
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int ItemsSearchMinimum = 5;

        public int ItemsSearchMaximum = 95;

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Items, Successor:
        // 1. If node.right is not null return Minimum(node.right)
        // 2. If node.right is null, traverse upwards until either current node = null or current node != parent.right
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Successor node.right != null          || Successor node.right == null          || No successor                          |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||            /+---+ 50+---+\            ||            /+---+ 50+---+\            |
        //|           /               \           ||           /               \           ||           /               \           |
        //|          20                80         ||          20                80         ||          20                80         |
        //|        /   \             /   \        ||        /   \             /   \        ||        /   \             /   \        |
        //|       /     \           /     \       ||       /     \           /     \       ||       /     \           /     \       |
        //|      10      40        70      90     ||      10      40        70      90     ||      10      40        70      90     |
        //|     / \     / \       / \     / \     ||     / \     / \       / \     / \     ||     / \     / \       / \     / \     |
        //|    /   \   /   \     /   \   /   \    ||    /   \   /   \     /   \   /   \    ||    /   \   /   \     /   \   /   \    |
        //|    5   15 35   45   65   75 85   95   ||    5   15 35   45   65   75 85   95   ||    5   15 35   45   65   75 85   95   |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| node = 80, successor = 85             || node = 85, successor = 90             || node = 95, successor = null           |
        //+-------------------------------------------------------------------------------------------------------------------------+


        public int[] ItemsSearchSuccessorSucceeds = {80, 85};

        public int ItemsSearchSuccessorFails = 95;

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Items, Predecessor:
        // 1. If node.left is not null return Maximum(node.left)
        // 2. If node.left is null, traverse upwards until either current node = null or current node != parent.left
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Predecessor node.left != null         || Predecessor node.left == null         || No predecessor                        |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||            /+---+ 50+---+\            ||            /+---+ 50+---+\            |
        //|           /               \           ||           /               \           ||           /               \           |
        //|          20                80         ||          20                80         ||          20                80         |
        //|        /   \             /   \        ||        /   \             /   \        ||        /   \             /   \        |
        //|       /     \           /     \       ||       /     \           /     \       ||       /     \           /     \       |
        //|      10      40        70      90     ||      10      40        70      90     ||      10      40        70      90     |
        //|     / \     / \       / \     / \     ||     / \     / \       / \     / \     ||     / \     / \       / \     / \     |
        //|    /   \   /   \     /   \   /   \    ||    /   \   /   \     /   \   /   \    ||    /   \   /   \     /   \   /   \    |
        //|    5   15 35   45   65   75 85   95   ||    5   15 35   45   65   75 85   95   ||    5   15 35   45   65   75 85   95   |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| node = 10, predecessor = 5            || node = 15, predecessor = 10           || node = 5, predecessor = null          |
        //+-------------------------------------------------------------------------------------------------------------------------+


        public int[] ItemsSearchPredecessorSucceeds = {10,5};

        public int ItemsSearchPredecessorFails = 5;

        //+-------------------------------------------------------------------------------------------------------------------------+

        public BinarySearchTree<int> GenerateTree(int[] items)
        {
            var tree = new BinarySearchTree<int>();
            foreach (var item in items)
            {
                tree.Insert(item);
            }

            return tree;
        }

        public BinarySearchTree<int> GenerateRandomTree()
        {
            var tree = new BinarySearchTree<int>();

            var random = new Random();
            var totalItemsInsert = random.Next(1, 1000);
            var totalItemsDelete = random.Next(1, 500);

            var items = new int[totalItemsInsert];

            RandomTreeInsertOperations(tree, items, totalItemsInsert);

            RandomTreeDeleteOperations(tree, items, totalItemsInsert, totalItemsDelete);

            return tree;
        }

        private void RandomTreeInsertOperations(BinarySearchTree<int> tree, int[] items, int totalItemsInsert)
        {
            var random = new Random();

            for (int i = 0; i < totalItemsInsert; i++)
            {
                int item;

                do
                {
                    item = random.Next(1, 5000);
                } while (items.Contains(item));

                tree.Insert(item);

                items[i] = item;
            }
        }

        private void RandomTreeDeleteOperations(BinarySearchTree<int> tree, int[] items, int totalItemsInsert, int totalItemsDelete)
        {
            var random = new Random();

            for (int i = 0; i < totalItemsDelete; i++)
            {
                var index = random.Next(totalItemsInsert - 1);
                var item = items[index];

                var node = tree.Search(item);

                if (node != null)
                {
                    tree.Delete(node);
                    items[index] = 0;
                }
            }
        }
    }
}
